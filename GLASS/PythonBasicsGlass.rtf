{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red166\green167\blue33;\red32\green8\blue12;\red48\green242\blue239;
\red254\green254\blue254;\red211\green32\blue211;}
\margl1440\margr1440\vieww15760\viewh13620\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs52 \cf0 \ul \ulc0 Python basics
\fs28 \ulnone \
\
lists : \cf1 \cb0 a = range(10)\cf0 \cb1 \
	or a = [0,1,2,3]\
	adding lists will concatenate them, a+a = [0,1,2,3,0,1,2,3]\
arrays : \cf1 \cb0 np.arange(10.)\cf0 \cb1 \
	or a = np.array([0,1,2,3])\
	arrays add element by element, a+a = array([0,2,4,6])\
change type : \cf1 \cb0 a = np.array(a)\cf0 \cb1 \
		list to array: a = np.array(a)\
		array to list: a = a.tolist() or list(a) \
		int to float: a = float(a)\
\cf1 \cb0 > ! less Desktop\cf0 \cb1 \
	Exclamation point sends commands to bash command line\
\
\
\
Reading in catalogs:\
	catalog = pl.loadtxt(\'91catalog.dat\'92)		\
if items in catalog are of a specific data type, do this:\
	catalog = pl.loadtxt(\'91catalog.dat\'92, dtype=str)\
to use only certain columns:\
	catalog = pl.loadtxt(\'91catalog.dat\'92, dtype=str, usecol=(1,2,3,4,5) )\
	catalog = pl.loadtxt(\'91catalog.dat\'92, dtype=str, usecol=(1,) )\
to read each column as its own array:\
	id, x, y, flux, eflux, area = pl.loadtxt(\'91catalog.dat\'92, dtype=str, unpack=True )\
\
\
in .bashrc:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs24 \cf2 \cb3 \CocoaLigature0 alias \cf4 ipython\cf5  \cf2 =\cf5  \'93python \cf6 -pylab\'94\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\
\
Plotting:\
\
> pl. scatter?    # gets documentation for pl.scatter\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs24 \cf5 \cb3 \CocoaLigature0 >pl.scatter(x, y, color=\'91g\'92, s=300)\
>pl.show()
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\
color=\'91g\'92 makes the plot-symbol green\
facecolor=\'91g\'92 keeps the boundary around the symbol black\
s = 300 makes the symbol size be the size in pixels\
s = np.array([10,15,12\'85])  makes the symbol size scale with the array number\
linewidth=2 makes the boundary around the symbol thicker/thinner\
\
\
\
\
Defining functions:\
> def magnitude(flux, zp=0):\
..	return -2.5 * pl.log10(flux) + zp\
..	\
magnitude(flux)     will now convert array flux into magnitudes\
magnitude(flux , 10)      now 10 is the zeropoint\
\
\
\
Reading FITS images:\
\

\f1\fs24 \cf5 \cb3 \CocoaLigature0 import pyfits as pf
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \

\f1\fs24 \cf5 \cb3 \CocoaLigature0 imdata = pf.getdata('m101.fits')
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\
imdata.shape    tells you the size of imdata\
imdata[0] is the bottom-most row of the image\
imdata[:,0] is the left-most column of the image\
len(imdata[0]) tells you the size\
\
[0] gives row\
[:,0] gives column instead of row\
\
\
To extract a region from the image use\'85\

\f1\fs24 \cf5 \cb3 \CocoaLigature0 subdata = imdata[ y1:y2, x1:x2 ]
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
where y1, y2, x1, x2 are the bottom, top, left, right pixels of the region you want\'85\
\
	_\ul 	y2	.		\ulnone \
	|		|\
x1	|		|  x2\
	\ul |		|\ulnone \
		y1\
\
subdata makes a smaller box of the original image\
\
\

\f1\fs24 \cf5 \cb3 \CocoaLigature0 subdata1d = subdata.flatten()
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
turns a 2d array into a 1d array\
\
\

\f1\fs24 \cf5 \cb3 \CocoaLigature0 h = pl.hist(subdata1d, bin=50)
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
Makes a histogram of this 1D array, with binsize as 50 (default is 10)\
\

\f1\fs24 \cf5 \cb3 \CocoaLigature0 h = pl.hist(subdata1d, bin=50, log=True)
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
Makes the y-axis logarithmic\
\

\f1\fs24 \cf5 \cb3 \CocoaLigature0 h = pl.hist(subdata1d, bin=50, log=True, label = \'91pixel dist.\'92)
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
Names what you plotted as \'91pixel dist\'92. These definitions can later be used in your legend by using the 
\f1\fs24 \cf5 \cb3 \CocoaLigature0 pl.legend()
\f0\fs28 \cf0 \cb1 \CocoaLigature1  command\
\

\f1\fs24 \cf5 \cb3 \CocoaLigature0 sky = pl.median(subdata1d)
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
See what the median data point of your image is, and define that as being the \'93sky\'94 value\
\

\f1\fs24 \cf5 \cb3 \CocoaLigature0 vline = pl.axvline(sky)
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
Plot a vertical line of value \'93sky\'94\
\

\f1\fs24 \cf5 \cb3 \CocoaLigature0 pl.legend(loc=\'91lower right\'92)
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
Creates a legend from the labels you used, in the lower right corner.\
\
vline. <tab> will cycle through what things vline can do\
vline. set_color(\'91g\'92)\
pl.draw()\
forces python to update the plot window\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf1 \cb0 > pl.clf \cf0 \cb1     clears the plotting window\
\
fig = pl.figure()\
sp1 = fig.add_subplot(1, 2, 1)     makes a subplot (#rows, #cols, plotpanel#)\
sp1 = fig.add_subplot(1, 2, 2)     \
sp1.scatter(magnitude(flux), area)\
sp2.hist(magnitude(flux)) \
\
In the plotting GUI, wspace & hspace tells the height and width space between panels\
or conversely, define them outright by fig.subplots_adjust(left=0.24)\
\
to run a script in ipython\
\cf1 \cb0 > %run script.py\cf0 \cb1 \
\
\
Delete a currently assigned variable:\
\cf1 \cb0 > del  a\cf0 \cb1 \
\
\
\
\
Defining Classes (Pythons version of Structures):\
\
You can create your own personal data structure to help organize reading in\
catalogs and such. This is useful in that you can give names to columns.\
The examples below can be used with the catalog.dat file used in the GLASS\
seminar.\
\
>>>	class galaxy:\
\'85:		def __init__(self, row):\
\'85:			self.id = row[0]\
\'85:			self.x = row[1]\
\'85:			self.y = row[2]\
\'85:			self.flux = row[3]\
\'85:			self.eflux = row[4]\
\'85:			self.area = row[5]\
\
>>> catalog = pl.loadtxt(\'93catalog.dat\'94)\
>>> galaxy01 = galaxy(catalog[0])\
>>> galaxy02 = galaxy(catalog[1])\
>>>\
>>> galaxy01.id\
1.0\
>>> galaxy02.x , galaxy02.y\
(322.12,  25.92)\
\
\
\
}